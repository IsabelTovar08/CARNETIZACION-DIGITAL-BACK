// <auto-generated />
using System;
using Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Forms", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Formulario para generar un nuevo carnet digital",
                            IsDeleted = false,
                            Name = "Crear Carnet",
                            Url = "/formulario"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Formulario para validar el correo del usuario",
                            IsDeleted = false,
                            Name = "Validar Correo",
                            Url = "/formulario"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Formulario donde se visualiza el carnet",
                            IsDeleted = false,
                            Name = "Ver Carnet",
                            Url = "/formulario"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Formulario para registrar y consultar asistencia",
                            IsDeleted = false,
                            Name = "Control de Asistencia",
                            Url = "/formulario"
                        });
                });

            modelBuilder.Entity("Entity.Models.ModelSecurity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("DocumentNumber")
                        .IsUnique()
                        .HasFilter("[DocumentNumber] IS NOT NULL");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("People", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentNumber = "1234567890",
                            FirstName = "Carlos",
                            IsDeleted = false,
                            LastName = "Funcionario",
                            Phone = "3200001111"
                        },
                        new
                        {
                            Id = 2,
                            DocumentNumber = "9876543210",
                            FirstName = "Laura",
                            IsDeleted = false,
                            LastName = "Estudiante",
                            Phone = "3100002222"
                        },
                        new
                        {
                            Id = 3,
                            DocumentNumber = "1122334455",
                            FirstName = "Ana",
                            IsDeleted = false,
                            LastName = "Administrador",
                            Phone = "3001234567"
                        },
                        new
                        {
                            Id = 4,
                            DocumentNumber = "9988776655",
                            FirstName = "José",
                            IsDeleted = false,
                            LastName = "Usuario",
                            Phone = "3151234567"
                        });
                });

            modelBuilder.Entity("Entity.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Modules", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gestión y emisión de carnets digitales",
                            IsDeleted = false,
                            Name = "Carnetización"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Validación de identidad y correos",
                            IsDeleted = false,
                            Name = "Validación"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Módulo para control de asistencia en eventos/clases",
                            IsDeleted = false,
                            Name = "Asistencia"
                        });
                });

            modelBuilder.Entity("Entity.Models.ModuleForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ModuleId", "FormId")
                        .IsUnique();

                    b.ToTable("ModuleForms", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 1,
                            IsDeleted = false,
                            ModuleId = 1
                        },
                        new
                        {
                            Id = 2,
                            FormId = 2,
                            IsDeleted = false,
                            ModuleId = 2
                        },
                        new
                        {
                            Id = 3,
                            FormId = 3,
                            IsDeleted = false,
                            ModuleId = 3
                        },
                        new
                        {
                            Id = 4,
                            FormId = 4,
                            IsDeleted = false,
                            ModuleId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification", "Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2025, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Por favor verifica tu cuenta haciendo clic en el enlace enviado.",
                            NotificationTypeId = 1,
                            Title = "Verificación de cuenta"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2025, 7, 28, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Estás invitado al evento de bienvenida. Confirma tu asistencia.",
                            NotificationTypeId = 2,
                            Title = "Invitación a evento"
                        });
                });

            modelBuilder.Entity("Entity.Models.Notifications.NotificationReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationReceived", "Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NotificationId = 1,
                            SendDate = new DateTime(2025, 7, 27, 10, 5, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NotificationId = 2,
                            ReadDate = new DateTime(2025, 7, 28, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            SendDate = new DateTime(2025, 7, 28, 9, 35, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.AccessPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeId");

                    b.ToTable("AccessPoints", "Operational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Acceso norte del evento",
                            EventId = 1,
                            IsDeleted = false,
                            Name = "Punto Norte",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Acceso sur del evento",
                            EventId = 1,
                            IsDeleted = false,
                            Name = "Punto Sur",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Acceso principal",
                            EventId = 2,
                            IsDeleted = false,
                            Name = "Punto Principal",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonDivissionProfileId")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonDivissionProfileId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Cards", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PersonDivissionProfileId = 1,
                            QRCode = "QR12345",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.PersonDivisionProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InternalDivisionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentlySelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternalDivisionId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.HasIndex("PersonId", "ProfileId", "InternalDivisionId")
                        .IsUnique();

                    b.ToTable("PersonDivisionProfiles", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternalDivisionId = 1,
                            IsCurrentlySelected = false,
                            IsDeleted = false,
                            PersonId = 1,
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            InternalDivisionId = 1,
                            IsCurrentlySelected = true,
                            IsDeleted = false,
                            PersonId = 2,
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Profiles", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Perfil para estudiantes de la institución",
                            IsDeleted = false,
                            Name = "Estudiante"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Perfil para docentes o instructores",
                            IsDeleted = false,
                            Name = "Profesor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Perfil para personal administrativo",
                            IsDeleted = false,
                            Name = "Administrativo"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Perfil para pasantes o practicantes",
                            IsDeleted = false,
                            Name = "Pasante"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Perfil para usuarios externos o visitantes",
                            IsDeleted = false,
                            Name = "Invitado"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessPointOfEntry")
                        .HasColumnType("int");

                    b.Property<int?>("AccessPointOfExit")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfExit")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccessPointOfEntry");

                    b.HasIndex("AccessPointOfExit");

                    b.HasIndex("PersonId");

                    b.ToTable("Attendances", "Operational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessPointOfEntry = 1,
                            AccessPointOfExit = 2,
                            IsDeleted = false,
                            PersonId = 1,
                            TimeOfEntry = new DateTime(2023, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeOfExit = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccessPointOfEntry = 1,
                            AccessPointOfExit = 2,
                            IsDeleted = false,
                            PersonId = 2,
                            TimeOfEntry = new DateTime(2023, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeOfExit = new DateTime(2023, 1, 1, 13, 45, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EventStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("SheduleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Events", "Operational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "TECH2025",
                            EventEnd = new DateTime(2023, 7, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            EventStart = new DateTime(2023, 7, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "Conferencia de Tecnología",
                            ScheduleDate = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleTime = new DateTime(1900, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "SALUD2025",
                            EventEnd = new DateTime(2023, 8, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventStart = new DateTime(2023, 8, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 2,
                            IsDeleted = false,
                            IsPublic = false,
                            Name = "Charla de Salud",
                            ScheduleDate = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleTime = new DateTime(1900, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.EventTargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeId");

                    b.ToTable("EventTargetAudience", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            IsDeleted = false,
                            ReferenceId = 1,
                            TypeId = 6
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            IsDeleted = false,
                            ReferenceId = 2,
                            TypeId = 6
                        },
                        new
                        {
                            Id = 3,
                            EventId = 2,
                            IsDeleted = false,
                            ReferenceId = 3,
                            TypeId = 6
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes", "Operational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Eventos de bienvenida institucional",
                            IsDeleted = false,
                            Name = "Bienvenida"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Reuniones privadas para planificación interna",
                            IsDeleted = false,
                            Name = "Planificación"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sesiones de formación para empleados o estudiantes",
                            IsDeleted = false,
                            Name = "Capacitación"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Espacios destinados a la concentración y repaso académico",
                            IsDeleted = false,
                            Name = "Jornada de Estudio"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Actividades laborales organizadas por jornada",
                            IsDeleted = false,
                            Name = "Jornada de Trabajo"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Eventos prácticos y participativos",
                            IsDeleted = false,
                            Name = "Taller"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Reuniones de carácter informal o comunitario",
                            IsDeleted = false,
                            Name = "Encuentro"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeparmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeparmentId = 1,
                            IsDeleted = false,
                            Name = "Bogotá"
                        },
                        new
                        {
                            Id = 2,
                            DeparmentId = 2,
                            IsDeleted = false,
                            Name = "Medellín"
                        },
                        new
                        {
                            Id = 3,
                            DeparmentId = 3,
                            IsDeleted = false,
                            Name = "Cali"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Location.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Cundinamarca"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Antioquia"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Valle del Cauca"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.AreaCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Área relacionada con sistemas, informática y desarrollo tecnológico",
                            IsDeleted = false,
                            Name = "Tecnología"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Área enfocada en estudios sociales, filosofía, literatura y cultura",
                            IsDeleted = false,
                            Name = "Humanidades"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Área de física, química, biología y otras ciencias naturales",
                            IsDeleted = false,
                            Name = "Ciencias"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Área dedicada a la enseñanza y formación académica",
                            IsDeleted = false,
                            Name = "Educación"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Área de gestión institucional y procesos administrativos",
                            IsDeleted = false,
                            Name = "Administración"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Branches", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Calle 1 # 2-34",
                            CityId = 1,
                            Email = "principal@org.com",
                            IsDeleted = false,
                            Location = "Centro",
                            Name = "Sucursal Principal",
                            OrganizationId = 1,
                            Phone = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Carrera 45 # 67-89",
                            CityId = 1,
                            Email = "norte@org.com",
                            IsDeleted = false,
                            Location = "Zona Norte",
                            Name = "Sucursal Norte",
                            OrganizationId = 1,
                            Phone = "987654321"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.InternalDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrganizationalUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaCategoryId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationalUnitId");

                    b.ToTable("InternalDivisions", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaCategoryId = 1,
                            Description = "División académica enfocada en ingeniería de software y sistemas.",
                            IsDeleted = false,
                            Name = "Escuela de Sistemas",
                            OrganizationalUnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            AreaCategoryId = 1,
                            Description = "División académica centrada en ingeniería civil y estructuras.",
                            IsDeleted = false,
                            Name = "Escuela de Civil",
                            OrganizationalUnitId = 1
                        },
                        new
                        {
                            Id = 3,
                            AreaCategoryId = 4,
                            Description = "Encargado de contabilidad, auditoría y normativas contables.",
                            IsDeleted = false,
                            Name = "Departamento de Contaduría",
                            OrganizationalUnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            AreaCategoryId = 4,
                            Description = "Área enfocada en teoría económica, micro y macroeconomía.",
                            IsDeleted = false,
                            Name = "Departamento de Economía",
                            OrganizationalUnitId = 2
                        },
                        new
                        {
                            Id = 5,
                            AreaCategoryId = 2,
                            Description = "Formación profesional en teoría musical, instrumentos y composición.",
                            IsDeleted = false,
                            Name = "Escuela de Música",
                            OrganizationalUnitId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Organizations", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Institución de educación superior",
                            IsDeleted = false,
                            Logo = "logo_unal.png",
                            Name = "Universidad Nacional",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Centro de atención médica",
                            IsDeleted = false,
                            Logo = "logo_hsj.png",
                            Name = "Hospital San José",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fundación sin ánimo de lucro",
                            IsDeleted = false,
                            Logo = "logo_fundacion.png",
                            Name = "Fundación Futuro",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.OrganizationalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrganizationalUnits", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Facultad de Ingeniería"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Facultad de Ciencias Económicas"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Facultad de Artes"
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.OrganizationalUnitBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("OrganizationalUnitBranches", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            IsDeleted = false,
                            OrganizationUnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            IsDeleted = false,
                            OrganizationUnitId = 1
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            IsDeleted = false,
                            OrganizationUnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 2,
                            IsDeleted = false,
                            OrganizationUnitId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Schedules", "Organizational");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            Name = "Horario Jornada A",
                            OrganizationId = 1,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            Name = "Horario Jornada B",
                            OrganizationId = 1,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsDeleted = false,
                            Name = "Horario Jornada C",
                            OrganizationId = 1,
                            StartTime = new TimeSpan(0, 6, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.CustomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeCategoryId");

                    b.ToTable("CustomTypes", "Parameter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cédula de ciudadanía",
                            IsDeleted = false,
                            Name = "CC",
                            TypeCategoryId = 4
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cédula de extranjería",
                            IsDeleted = false,
                            Name = "CE",
                            TypeCategoryId = 4
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tarjeta de identidad",
                            IsDeleted = false,
                            Name = "TI",
                            TypeCategoryId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Pasaporte",
                            IsDeleted = false,
                            Name = "PA",
                            TypeCategoryId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Número de Identificación Tributaria",
                            IsDeleted = false,
                            Name = "NIT",
                            TypeCategoryId = 4
                        },
                        new
                        {
                            Id = 6,
                            Description = "Sangre tipo O positivo",
                            IsDeleted = false,
                            Name = "O+",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 7,
                            Description = "Sangre tipo O negativo",
                            IsDeleted = false,
                            Name = "O-",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 8,
                            Description = "Sangre tipo A positivo",
                            IsDeleted = false,
                            Name = "A+",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sangre tipo A negativo",
                            IsDeleted = false,
                            Name = "A-",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 10,
                            Description = "Sangre tipo B positivo",
                            IsDeleted = false,
                            Name = "B+",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 11,
                            Description = "Sangre tipo B negativo",
                            IsDeleted = false,
                            Name = "B-",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 12,
                            Description = "Sangre tipo AB positivo",
                            IsDeleted = false,
                            Name = "AB+",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 13,
                            Description = "Sangre tipo AB negativo",
                            IsDeleted = false,
                            Name = "AB-",
                            TypeCategoryId = 5
                        },
                        new
                        {
                            Id = 14,
                            Description = "Organización tipo empresa",
                            IsDeleted = false,
                            Name = "Empresa",
                            TypeCategoryId = 1
                        },
                        new
                        {
                            Id = 15,
                            Description = "Organización tipo colegio",
                            IsDeleted = false,
                            Name = "Colegio",
                            TypeCategoryId = 1
                        },
                        new
                        {
                            Id = 16,
                            Description = "Organización tipo universidad",
                            IsDeleted = false,
                            Name = "Universidad",
                            TypeCategoryId = 1
                        },
                        new
                        {
                            Id = 17,
                            Description = "Organización sede principal",
                            IsDeleted = false,
                            Name = "Sede Principal",
                            TypeCategoryId = 1
                        },
                        new
                        {
                            Id = 18,
                            Description = "Organización tipo sucursal",
                            IsDeleted = false,
                            Name = "Sucursal",
                            TypeCategoryId = 1
                        },
                        new
                        {
                            Id = 19,
                            Description = "Notificación para verificación de identidad o datos",
                            IsDeleted = false,
                            Name = "Verificación",
                            TypeCategoryId = 3
                        },
                        new
                        {
                            Id = 20,
                            Description = "Notificación de invitación a evento o sistema",
                            IsDeleted = false,
                            Name = "Invitación",
                            TypeCategoryId = 3
                        },
                        new
                        {
                            Id = 21,
                            Description = "Notificación de recordatorio de evento o tarea",
                            IsDeleted = false,
                            Name = "Recordatorio",
                            TypeCategoryId = 3
                        },
                        new
                        {
                            Id = 22,
                            Description = "Notificación de alerta por evento crítico",
                            IsDeleted = false,
                            Name = "Alerta",
                            TypeCategoryId = 3
                        },
                        new
                        {
                            Id = 23,
                            Description = "Punto de acceso solo de entrada",
                            IsDeleted = false,
                            Name = "Entrada",
                            TypeCategoryId = 2
                        },
                        new
                        {
                            Id = 24,
                            Description = "Punto de acceso solo de salida",
                            IsDeleted = false,
                            Name = "Salida",
                            TypeCategoryId = 2
                        },
                        new
                        {
                            Id = 25,
                            Description = "Punto de acceso bidireccional",
                            IsDeleted = false,
                            Name = "Entrada y salida",
                            TypeCategoryId = 2
                        },
                        new
                        {
                            Id = 26,
                            Description = "Descripción",
                            IsDeleted = false,
                            Name = "Division",
                            TypeCategoryId = 6
                        },
                        new
                        {
                            Id = 27,
                            Description = "Descripción",
                            IsDeleted = false,
                            Name = "Profile",
                            TypeCategoryId = 6
                        },
                        new
                        {
                            Id = 28,
                            Description = "Descripción",
                            IsDeleted = false,
                            Name = "Perfil",
                            TypeCategoryId = 6
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses", "Parameter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Inactivo"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Procesando"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Rechazado"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Entregado"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Leída"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "En curso"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Finalizado"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Cancelado"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Expirado"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Renovado"
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.TypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypeCategories", "Parameter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Organización"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Punto de acceso"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Notificación"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Tipo de documento"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Tipo de sangre"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Filtros para eventos privados"
                        });
                });

            modelBuilder.Entity("Entity.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Puede crear nuevos registros",
                            IsDeleted = false,
                            Name = "crear"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Puede editar registros existentes",
                            IsDeleted = false,
                            Name = "editar"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Puede validar datos (correo, QR)",
                            IsDeleted = false,
                            Name = "validar"
                        });
                });

            modelBuilder.Entity("Entity.Models.RolFormPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RolId", "FormId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolFormPermissions", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 1,
                            IsDeleted = false,
                            PermissionId = 1,
                            RolId = 3
                        },
                        new
                        {
                            Id = 2,
                            FormId = 2,
                            IsDeleted = false,
                            PermissionId = 3,
                            RolId = 3
                        },
                        new
                        {
                            Id = 3,
                            FormId = 3,
                            IsDeleted = false,
                            PermissionId = 2,
                            RolId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rol para personal autorizado a validar y emitir carnets",
                            IsDeleted = false,
                            Name = "Funcionario"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rol con permisos limitados a visualización de carnet y asistencia",
                            IsDeleted = false,
                            Name = "Estudiante"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Acceso total al sistema de carnetización digital",
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Acceso restringido, solo visualización",
                            IsDeleted = false,
                            Name = "Usuario"
                        });
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetCodeExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Users", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "funcionario@carnet.edu",
                            IsDeleted = false,
                            Password = "123",
                            PersonId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.estudiante@correo.com",
                            IsDeleted = false,
                            Password = "L4d!Estudiante2025",
                            PersonId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@carnet.edu",
                            IsDeleted = false,
                            Password = "Adm!nCarnet2025",
                            PersonId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "usuario@carnet.edu",
                            IsDeleted = false,
                            Password = "Usr!Carnet2025",
                            PersonId = 4
                        });
                });

            modelBuilder.Entity("Entity.Models.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RolId", "UserId")
                        .IsUnique();

                    b.ToTable("UserRoles", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RolId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RolId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            RolId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            RolId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Entity.Models.ModelSecurity.Person", b =>
                {
                    b.HasOne("Entity.Models.Parameter.CustomType", "BloodType")
                        .WithMany("PersonBlodType")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entity.Models.Organizational.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Entity.Models.Parameter.CustomType", "DocumentType")
                        .WithMany("PersonDocumentType")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BloodType");

                    b.Navigation("City");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Entity.Models.ModuleForm", b =>
                {
                    b.HasOne("Entity.Models.Form", "Form")
                        .WithMany("ModuleForm")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Module", "Module")
                        .WithMany("ModuleForm")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity.Models.Notifications.Notification", b =>
                {
                    b.HasOne("Entity.Models.Parameter.CustomType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Entity.Models.Notifications.NotificationReceived", b =>
                {
                    b.HasOne("Entity.Models.Notifications.Notification", "Notification")
                        .WithMany("NotificationReceiveds")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.Status", "Status")
                        .WithMany("NotificatiosReceived")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Organizational.AccessPoint", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Event", "Event")
                        .WithMany("AccessPoints")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.CustomType", "AccessPointType")
                        .WithMany("AccessPoints")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessPointType");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.Card", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Assignment.PersonDivisionProfile", "PersonDivisionProfile")
                        .WithOne("Card")
                        .HasForeignKey("Entity.Models.Organizational.Assignment.Card", "PersonDivissionProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.Status", "Status")
                        .WithMany("cards")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonDivisionProfile");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.PersonDivisionProfile", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Structure.InternalDivision", "InternalDivision")
                        .WithMany()
                        .HasForeignKey("InternalDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelSecurity.Person", "Person")
                        .WithOne("PersonDivisionProfile")
                        .HasForeignKey("Entity.Models.Organizational.Assignment.PersonDivisionProfile", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Organizational.Assignment.Profile", "Profile")
                        .WithMany("PersonDivisionProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalDivision");

                    b.Navigation("Person");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Attendance", b =>
                {
                    b.HasOne("Entity.Models.Organizational.AccessPoint", "AccessPointEntry")
                        .WithMany("AttendancesEntry")
                        .HasForeignKey("AccessPointOfEntry")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entity.Models.Organizational.AccessPoint", "AccessPointExit")
                        .WithMany("AttendancesExit")
                        .HasForeignKey("AccessPointOfExit")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entity.Models.ModelSecurity.Person", "Person")
                        .WithMany("Attendances")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessPointEntry");

                    b.Navigation("AccessPointExit");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Event", b =>
                {
                    b.HasOne("Entity.Models.Organizational.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Models.Organizational.Structure.Schedule", "Shedule")
                        .WithMany()
                        .HasForeignKey("SheduleId");

                    b.HasOne("Entity.Models.Parameter.Status", "Status")
                        .WithMany("Events")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("Shedule");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entity.Models.Organizational.EventTargetAudience", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Event", "Event")
                        .WithMany("EventTargetAudiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.CustomType", "CustomType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomType");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Location.City", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Location.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Branch", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Location.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Organizational.Structure.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.InternalDivision", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Structure.AreaCategory", "AreaCategory")
                        .WithMany("InternalDivisions")
                        .HasForeignKey("AreaCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Models.Organizational.Structure.Branch", null)
                        .WithMany("InternalDivisions")
                        .HasForeignKey("BranchId");

                    b.HasOne("Entity.Models.Organizational.Structure.OrganizationalUnit", "OrganizationalUnit")
                        .WithMany("InternalDivissions")
                        .HasForeignKey("OrganizationalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaCategory");

                    b.Navigation("OrganizationalUnit");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Organization", b =>
                {
                    b.HasOne("Entity.Models.Parameter.CustomType", "OrganizaionType")
                        .WithMany("Organization")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizaionType");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.OrganizationalUnit", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Structure.Branch", null)
                        .WithMany("OrganizationalUnits")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.OrganizationalUnitBranch", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Structure.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Organizational.Structure.OrganizationalUnit", "OrganizationUnit")
                        .WithMany("OrganizationalUnitBranches")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("OrganizationUnit");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Schedule", b =>
                {
                    b.HasOne("Entity.Models.Organizational.Structure.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Entity.Models.Parameter.CustomType", b =>
                {
                    b.HasOne("Entity.Models.Parameter.TypeCategory", "TypeCategory")
                        .WithMany("Types")
                        .HasForeignKey("TypeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeCategory");
                });

            modelBuilder.Entity("Entity.Models.RolFormPermission", b =>
                {
                    b.HasOne("Entity.Models.Form", "Form")
                        .WithMany("RolFormPermissions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Permission", "Permission")
                        .WithMany("RolFormPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Role", "Rol")
                        .WithMany("RolFormPermissions")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.HasOne("Entity.Models.ModelSecurity.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Entity.Models.User", "PersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity.Models.UserRoles", b =>
                {
                    b.HasOne("Entity.Models.Role", "Rol")
                        .WithMany("UserRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Form", b =>
                {
                    b.Navigation("ModuleForm");

                    b.Navigation("RolFormPermissions");
                });

            modelBuilder.Entity("Entity.Models.ModelSecurity.Person", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("PersonDivisionProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Module", b =>
                {
                    b.Navigation("ModuleForm");
                });

            modelBuilder.Entity("Entity.Models.Notifications.Notification", b =>
                {
                    b.Navigation("NotificationReceiveds");
                });

            modelBuilder.Entity("Entity.Models.Organizational.AccessPoint", b =>
                {
                    b.Navigation("AttendancesEntry");

                    b.Navigation("AttendancesExit");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.PersonDivisionProfile", b =>
                {
                    b.Navigation("Card")
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Models.Organizational.Assignment.Profile", b =>
                {
                    b.Navigation("PersonDivisionProfiles");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Event", b =>
                {
                    b.Navigation("AccessPoints");

                    b.Navigation("EventTargetAudiences");
                });

            modelBuilder.Entity("Entity.Models.Organizational.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Location.City", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Location.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.AreaCategory", b =>
                {
                    b.Navigation("InternalDivisions");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.Branch", b =>
                {
                    b.Navigation("InternalDivisions");

                    b.Navigation("OrganizationalUnits");
                });

            modelBuilder.Entity("Entity.Models.Organizational.Structure.OrganizationalUnit", b =>
                {
                    b.Navigation("InternalDivissions");

                    b.Navigation("OrganizationalUnitBranches");
                });

            modelBuilder.Entity("Entity.Models.Parameter.CustomType", b =>
                {
                    b.Navigation("AccessPoints");

                    b.Navigation("Notifications");

                    b.Navigation("Organization");

                    b.Navigation("PersonBlodType");

                    b.Navigation("PersonDocumentType");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Status", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("NotificatiosReceived");

                    b.Navigation("cards");
                });

            modelBuilder.Entity("Entity.Models.Parameter.TypeCategory", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Entity.Models.Permission", b =>
                {
                    b.Navigation("RolFormPermissions");
                });

            modelBuilder.Entity("Entity.Models.Role", b =>
                {
                    b.Navigation("RolFormPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
